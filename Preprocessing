path = 'C:/Users/84014/Desktop/19 Fall/EC 601/Cloud/understanding_cloud_organization'
# 输出path下面的内容
# print(os.listdir(path))
# 将训练集导入
train = pd.read_csv(f'{path}/train.csv')
sub = pd.read_csv(f'{path}/sample_submission.csv')
# print(train)
# 有多少个train和test集
n_train = len(os.listdir(f'{path}/train_images'))
n_test = len(os.listdir(f'{path}/test_images'))
# print(f'There are {n_train} images in train dataset')
# print(f'There are {n_test} images in test dataset')
# 计算各有多少个张 得到各5546张 其实没啥用 因为有些是空的
# print(train['Image_Label'].apply(lambda x: x.split('_')[1]).value_counts())
# 这个才是实际计算 拥有1~4个mask的图像数量
# print(train.loc[train['EncodedPixels'].isnull() == False,
# 'Image_Label'].apply(lambda x: x.split('_')[0]).value_counts().value_counts())

train['label'] = train['Image_Label'].apply(lambda x: x.split('_')[1])
train['im_id'] = train['Image_Label'].apply(lambda x: x.split('_')[0])


sub['label'] = sub['Image_Label'].apply(lambda x: x.split('_')[1])
sub['im_id'] = sub['Image_Label'].apply(lambda x: x.split('_')[0])
# print('train: ', train)
# print('sub: ', sub)

# 预览train集中的数据效果

# fig = plt.figure(figsize=(25, 16))
# for j, im_id in enumerate(np.random.choice(train['im_id'].unique(), 4)):
#     for i, (idx, row) in enumerate(train.loc[train['im_id'] == im_id].iterrows()):
#         ax = fig.add_subplot(5, 4, j * 4 + i + 1, xticks=[], yticks=[])
#         im = Image.open(f"{path}/train_images/{row['Image_Label'].split('_')[0]}")
#         pylab.imshow(im)
#         mask_rle = row['EncodedPixels']
#         try:  # label might not be there!
#             mask = rle_decode(mask_rle)
#         except:
#             mask = np.zeros((1400, 2100))
#         pylab.imshow(mask, alpha=0.5, cmap='gray')
#         pylab.show()
#         ax.set_title(f"Image: {row['Image_Label'].split('_')[0]}. Label: {row['label']}")


# 预处理数据 id_mask_count数出有几张mask
id_mask_count = train.loc[train['EncodedPixels'].isnull() == False, 'Image_Label'].apply(lambda x: x.split('_')[0]).value_counts().\
reset_index().rename(columns={'index': 'img_id', 'Image_Label': 'count'})
train_ids, valid_ids = train_test_split(id_mask_count['img_id'].values, random_state=42, stratify=id_mask_count['count'], test_size=0.1)
test_ids = sub['Image_Label'].apply(lambda x: x.split('_')[0]).drop_duplicates().values

# print(id_mask_count, train_ids, train_ids, valid_ids, test_ids)

# 演示
image_name = '8242ba0.jpg'
image = get_img(image_name)
mask = make_mask(train, image_name)

visualize(image, mask)
# 水平翻转
plot_with_augmentation(image, mask, albu.HorizontalFlip(p=1))
# 垂直翻转
plot_with_augmentation(image, mask, albu.VerticalFlip(p=1))
# 随机旋转
plot_with_augmentation(image, mask, albu.RandomRotate90(p=1))
# 弹性变换
plot_with_augmentation(image, mask, albu.ElasticTransform(p=1, alpha=120, sigma=120 * 0.05, alpha_affine=120 * 0.03))
# 网格变换
plot_with_augmentation(image, mask, albu.GridDistortion(p=1))
# 畸变
plot_with_augmentation(image, mask, albu.OpticalDistortion(p=1, distort_limit=2, shift_limit=0.5))


# 制作符合dataloader输入要求的dataset格式
class CloudDataset(Dataset):
    # df就是dataframe
    def __init__(self, df: pd.DataFrame = None, datatype: str = 'train', img_ids: np.array = None,
                 # AT被替换成了torch
                 transforms = albu.Compose([albu.HorizontalFlip(), AT.ToTensor()]),
                preprocessing=None):
        self.df = df
        if datatype != 'test':
            self.data_folder = f"{path}/train_images"
        else:
            self.data_folder = f"{path}/test_images"
        self.img_ids = img_ids
        self.transforms = transforms
        self.preprocessing = preprocessing

    def __getitem__(self, idx):
        image_name = self.img_ids[idx]
        mask = make_mask(self.df, image_name)
        image_path = os.path.join(self.data_folder, image_name)
        img = cv2.imread(image_path)
        img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
        augmented = self.transforms(image=img, mask=mask)
        img = augmented['image']
        mask = augmented['mask']
        if self.preprocessing:
            preprocessed = self.preprocessing(image=img, mask=mask)
            img = preprocessed['image']
            mask = preprocessed['mask']
        return img, mask

    def __len__(self):
        return len(self.img_ids)
